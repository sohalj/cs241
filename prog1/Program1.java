/* 
 * Program1.java
 *
 * The driver program for CSCI 241's Program 1
 *
 * Uses methods in the LearningLanguage class to learn from text 
 * and generate new sentences.
 * 
 * Do not modify this file.  
 *
 * Brian Hutchinson
 * October 3rd, 2013
 *
 * ----------------------------------------------------------------------------
 *
 * usage:
 *
 * java LearningLanguage inputFileName dictionaryFileName countsFileName numberOfRandomSentences
 *
 * where the arguments are
 * 
 *   inputFileName         a plaintext file from which your program will "learn"
 *   dictionaryFileName    a dictionary of words that will be generated by the program
 *   countsFileName        a file of word pair counts that will be generated by the program
 *   numberOfSentences     the number of output sentences the program should generate/print
 *
*/

public class Program1 {
    public static void main(String[] args) {
        if ( args.length != 4 ) {
            System.err.println("Error: Wrong number of arguments.");
            System.exit(2);
        }

        String inputFileName          = args[0];
        String dictionaryFileName     = args[1];
        String countsFileName         = args[2];
        int numberOfRandomSentences = Integer.parseInt(args[3]);

        java.util.HashMap<String,Integer> wordToIndex = new java.util.HashMap<String,Integer>();

        // Build mappings from word to numerical index and from numerical index to word 
        String[] indexToWord = LanguageLearner.generateDictionary(inputFileName,wordToIndex); 

        // Print the dictionary to a file
        LanguageLearner.printDictionary(indexToWord,dictionaryFileName);

        // Load bigram word sequence counts from the input text file
        int[][] counts = LanguageLearner.loadCounts(wordToIndex,inputFileName);

        // Print out the counts to a file
        LanguageLearner.printCounts(counts,indexToWord,countsFileName);

        // Convert the counts into probabilities
        double[][] probabilities = LanguageLearner.convertCountsToProbabilities(counts);

        // For each word, determine the most probable word to follow it
        int[] mostProbableNextWord = LanguageLearner.getMostProbableNextWord(counts,indexToWord);

        // Determine and print the most probable word sequence (according to the model)
        System.out.println("Most Probable Sentence:");
        LanguageLearner.generateMostProbableText(wordToIndex,indexToWord,mostProbableNextWord);

        // Generate numberOfRandomSentences random sentences according to the model
        System.out.println("\n" + numberOfRandomSentences + " Random Sentences:");
        LanguageLearner.generateRandomText(probabilities,wordToIndex,indexToWord,numberOfRandomSentences);
    }
}
