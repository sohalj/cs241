Kelly Lyon , J.P. Sohal

    Our program was a challenge, but we conquered it! We spent a lot of time after class and we met with the mentors. We felt that the paired programming worked very well. It was a good experience. We both approached problem solving the same way: Writing out our ideas, how we might do them, and then rough code of how we plan to implent the ideas into our code. That proved to be very useful. Although we spent a lot of time working on the program, much of it was spent brainstorming, and less debugging. 
     We ran into troubles with the loadcounts method. After A LOT of searching we found that the problem lied in the hashmap. We had to go back and step through our code. By doing that we determined that the hashmap was giving two words the same value. That was a problem later on in the program. Once we fixed that then every thing fell into place. The methods we had written but not yet tested worked great- because we had brainstormed and worked through them so well. Though we were stuck on that problem for quite a while we knew that once we tackled the loadcounts problem the rest would come together quickly. That is exactly what happened. 
     Before we fixed the load counts, that part of our code was definitly the most interesting. It had two for loops and searched through the file "totalxtotal" times. After talking to you we were able to construct what we have now; it is much more efficient. 
     We didn't have to test the program too much because durring our brainstorming we fixed the errors on paper. Though when we did run into errors we would insert output lines so we could see if things were happeneing and where things were changing. That was our best debugging tool. Additionally when we were stuck we were able to bounce ideas off of eachother. We would walk through the text outloud saying what it is currently doing and discussing what we think it should have been doing. 
     We chose to use an article from the Western Front about the riot that occured last Saturday. We coppied that from the webpage and then ran the file through a text-to-lower-case program on the command line. We found that on google. We tested our program with that file and the most probable sentence was " <s> the crowd to clear the!!! "   The most comprehensive sentence we got was "<s> additional drunk driving patrols went into the riot to disperse over loudspeakers </s> "  The most absurd sentence we got was also the longest: "<s> “i was hit in the crowd swelled in front of indian street shortly after the warnings, and down indian street and answered with a bearcat — through the crowd members failed to shooting beanbags from the riot, washington state patrol the riot, washington state patrol the police said </s>" 
     After much work, the program works great. We tested it with all of the provided files and the one that we made. There is nothing in the program that is not working. The larger the size of the file the longer it takes to run. We noticed that the dictionary and the counts increase quite a bit when we used bigger files. The content of the topic also made a difference in the random sentences produced. We noticed that the more focused the article is on one certain thing the more comprehensive the sentences were. For example if the article was about a team of people and talked a little about each player then the sentences wouldn't quite make sense. Rather than if the article focused on one single player of the team then the sentences generated would more likely make more sense. 
     The paired programming was a really good experience. Working with two people helped when we got stuck. Having the other person's point of view made problem solving much quicker and less painful. Rather than spending an hour looking at one problem by yourself and not being able to figure it out, with two people the other person was there all the time and was usually able to fix the problem very quickly. 
